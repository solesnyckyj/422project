        module lfsr (out, clk, rst);
            output reg [6:0] out; // 7 bit LFSR 
            input clk, rst; //CLK and RST pin

            wire feedback;
            wire xor1, xor2, xor3;
            //initial seeding done below
            assign xor1 = ~(out[3] ^ out[2]);
            assign xor2 = ~(out[1] ^ out[0]);
            assign xor3 = xor1 ^ xor2;
            //on hit, go to next state. 
            always @(posedge clk, posedge rst)
                begin
                    if (rst)
                        out = 7'b0000010; //sets seed
                    else
                        out = {xor3,out[6:0]}; //shifts to next pseudorandom 
                end
            endmodule

            //determines what the placement should be
            module placement(in, out, shift, rst);
                output reg [7:0] out;
                input [2:0] in;
                input shift, rst;
                always @(posedge shift, posedge rst) // if told to shift or reset, change. 
                begin
                    if(rst) //return to seed state
                        out = 8'b00000100; // default from seed
                    else begin
                        case (out) //otherwise choose actual output corresponding to #'s
                        0 : out = 8'b00000000;
                        1 : out = 8'b00000010;
                        2 : out = 8'b00000100; 
                        3 : out = 8'b00001000;
                        4 : out = 8'b00010000;
                        5 : out = 8'b00100000;
                        6 : out = 8'b01000000;
                        7 : out = 8'b10000000;
                        endcase
                end
            endmodule
            // determines whether or not to trigger the other modules
                    module trigger(counter,clk,buttonIn, shift,rst,start,instLoss);
                        input [8:0] counter; //counter input to simulate 555 and real world time
                        input clk,rst; //clock or reset
                        input [7:0] buttonIn;
                        output reg shift; //input saying whether or not to shift
                        output instLoss; //whether to initiate loss routine
                        always @(posedge clk)begin
                            if (rst) begin //do not change, do not initiate loss
                                shift <= 0;
                                instLoss <= 0;
                            end else if (counter == 8'b11111111)begin
                                shift <= 0; //go to next state 
                                instLoss <= 1; //initiate loss because user waited too long
                            end else if (buttonIn > 0) begin
                                shift <= 1; //shift when a button is pressed. 
                                instLoss <= 0; // do not initiate auto-loss
                            end else if (start == 1'b1) begin
                                shift <= 1; //maybe blocking needed? To see.... Shift when user starts new game 
                                instLoss = 0; // do not initiate auto-loss
                            end
                        end 
                    endmodule
        
                    module whackModule(buttonIn, clk, rst, out, score, start, winlose, places);
                        input [7:0] buttonIn,places; //placement and button matrix
                        input clk,rst,start; //clock input by default, as well as start button and reset
                        output reg [2:0] out; // no need for this I guess? 
                        output reg [3:0] score; //score of the user
                        output reg [1:0] winlose; // if user has won or lost at the time. 
                        output reg [7:0] places; //where the next button to be illuminated is. 
                        wire [6:0] lfsrReg;
                        wire trig; // to trigger or not
                        wire [8:0] counts; //current state of the counter to see if user took too long
                        wire hold; // hold state
                        always@(*)
                            begin
                                if(hold && start))begin
                                    hold = 0; // clears hold condition once start has been set. 
                                end
                                countUp counter(counts,clk,rst,start,hold); // need to handle for when just won or loss. i.e. hold.  
                                detNextState trigger(counts,clk,buttonIn,trig,rst,start, instLoss);//sets whether to move to next state or initiate a loss. 
                                rnginit lfsr(lfsrReg,trig,rst); // shifts the RNG
                                nextPlace placement(lfsrReg[2:0],places,trig,rst); //outputs placement of the pieces.
                                //score module and determining if win loss. 
                            end
                    endmodule
                    //Counter counts a timer to simulate the 555 timer. 
                    module counter (out, clk, rst,start,hold); 
                        output reg [8:0] out;
                        input clk, rst,start,hold;
                        always @(posedge clk)
                            if (reset || start) begin
                                out <= 8'b0 ;
                            end else if (hold == 0) begin
                                out <= out + 1; //increment up one.
                            end
                    endmodule 
